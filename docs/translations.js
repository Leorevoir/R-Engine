// ========================================
// Translation Data
// ========================================

const translations = {
    en: {
        // Language selector
        langSelector: {
            label: "Language",
            en: "English",
            fr: "Fran√ßais"
        },
        
        // Logo
        logo: {
            title: "R-Engine",
            subtitle: "ECS Documentation"
        },
        
        // Navigation
        nav: {
            introduction: "Introduction",
            architecture: "Architecture",
            coreConcepts: "Core Concepts",
            entities: "Entities",
            components: "Components",
            systems: "Systems",
            resources: "Resources",
            queries: "Queries",
            commands: "Commands",
            advanced: "Advanced Features",
            events: "Events",
            hierarchies: "Hierarchies",
            runConditions: "Run Conditions",
            schedules: "Schedules",
            storage: "Storage System",
            examples: "Examples",
            apiReference: "API Reference"
        },
        
        // Search
        search: {
            placeholder: "Search..."
        },
        
        // Introduction
        introduction: {
            title: "Introduction to R-Engine ECS",
            lead: "R-Engine uses an <strong>Entity Component System (ECS)</strong> architecture inspired by Bevy, designed to provide performance, flexibility and ease of use.",
            whatIsECS: "What is an ECS?",
            whatIsECSDesc: "An ECS is an architectural design pattern that separates data (Components) from logic (Systems), connecting them through entities (Entities). This approach favors composition over inheritance and enables more modular and performant code.",
            keyFeatures: "Key Features",
            features: {
                archetype: "<strong>Archetype-based Storage</strong>: Archetype-optimized storage for maximum performance",
                typeSafety: "<strong>Type Safety</strong>: Compile-time type system to avoid errors",
                di: "<strong>Dependency Injection</strong>: Automatic system dependency resolution",
                commandBuffer: "<strong>Command Buffer</strong>: Deferred modifications to avoid iterator invalidation",
                events: "<strong>Events System</strong>: Asynchronous communication between systems",
                hierarchy: "<strong>Hierarchy Support</strong>: Native parent-child relationships"
            }
        },
        
        // Architecture
        architecture: {
            title: "System Architecture",
            executionFlow: "Execution Flow",
            flowSteps: {
                init: "Initialization",
                initDesc: "Scene creation and STARTUP systems execution",
                mainLoop: "Main Loop",
                update: "Execute UPDATE systems (game logic)",
                applyCommands: "Apply Command Buffer (structural modifications)",
                render: "Execute RENDER systems (display)",
                updateEvents: "Update Events (double buffering)"
            }
        },
        
        // Core Concepts
        coreConcepts: {
            title: "Core Concepts",
            
            // Entities
            entities: {
                title: "Entities",
                desc: "An entity is simply a unique identifier (<code>u32</code>) that groups components together. It has no data or behavior of its own.",
                creating: "Creating Entities",
                example: "Example"
            },
            
            // Components
            components: {
                title: "Components",
                desc: "Components are pure data structures that define an entity's properties. They contain no logic, only data.",
                bestPractices: "Best Practices",
                practices: {
                    simple: "Keep components simple and focused",
                    pod: "Use POD (Plain Old Data) structs as much as possible",
                    multiple: "Prefer multiple small components to one monolithic component",
                    markers: "Use marker components (without data) to tag entities"
                },
                examples: "Component Examples"
            },
            
            // Systems
            systems: {
                title: "Systems",
                desc: "Systems are functions that implement your application's logic. They operate on entities via queries and can access global resources.",
                anatomy: "Anatomy of a System",
                basicStructure: "Basic Structure",
                parameters: "System Parameters",
                paramTable: {
                    type: "Type",
                    description: "Description",
                    usage: "Usage",
                    query: "Iterate over entities with certain components",
                    queryUsage: "Logic on multiple entities",
                    res: "Read-only access to a resource",
                    resUsage: "Read configuration, time, etc.",
                    resMut: "Mutable access to a resource",
                    resMutUsage: "Modify global state",
                    commands: "Deferred command buffer",
                    commandsUsage: "Spawn, despawn, add/remove components",
                    eventWriter: "Send events",
                    eventWriterUsage: "Asynchronous communication",
                    eventReader: "Read events",
                    eventReaderUsage: "React to events"
                },
                completeExample: "Complete Example",
                registration: "Registering Systems"
            },
            
            // Resources
            resources: {
                title: "Resources",
                desc: "Resources are global, unique data accessible by all systems. They are perfect for storing configuration, global state, or services.",
                defAndUsage: "Definition and Usage"
            },
            
            // Queries
            queries: {
                title: "Queries",
                desc: "Queries allow you to iterate over entities that match certain criteria. They support multiple types of filters and access patterns.",
                accessTypes: "Access Types",
                accessTable: {
                    wrapper: "Wrapper",
                    description: "Description",
                    example: "Example",
                    mut: "Mutable access to component T",
                    ref: "Read-only access to component T",
                    with: "Filter: requires component T (no access)",
                    without: "Filter: excludes entities with T",
                    optional: "Optional access (nullptr if absent)"
                },
                examples: "Query Examples",
                warning: "‚ö†Ô∏è Important",
                warningText: "Never modify the ECS structure (spawn, despawn, add/remove components) while iterating a query. Use <code>Commands</code> instead to defer these operations."
            },
            
            // Commands
            commands: {
                title: "Commands",
                desc: "The command system allows you to defer structural ECS modifications (entity creation/destruction, component addition/removal) to avoid iterator invalidation during system execution.",
                api: "Commands API",
                operations: "Available Operations",
                hierarchies: "Parent-Child Hierarchies",
                hierarchyRelations: "Hierarchical Relations",
                applyMoment: "üí° Application Timing",
                applyMomentText: "All commands are automatically applied at the end of the current schedule, just before the next system application. You don't need to manually call <code>apply()</code>."
            }
        },
        
        // Advanced Features
        advanced: {
            title: "Advanced Features",
            
            // Events
            events: {
                title: "Events",
                desc: "The event system enables asynchronous communication between systems. Events use double buffering: events sent at frame N are readable at frame N+1.",
                defAndUsage: "Definition and Usage",
                warning: "‚ö†Ô∏è Lifetime",
                warningText: "Events only persist for one frame. They are automatically cleaned up at the beginning of each new frame cycle."
            },
            
            // Hierarchies
            hierarchies: {
                title: "Hierarchies",
                desc: "R-Engine natively supports parent-child relationships via the <code>Parent</code> and <code>Children</code> components.",
                components: "Hierarchy Components",
                autoComponents: "Automatic components",
                creation: "Creating a Hierarchy",
                traversal: "Traversing a Hierarchy"
            },
            
            // Run Conditions
            runConditions: {
                title: "Run Conditions",
                desc: "Run conditions allow systems to execute conditionally, based on application state or event presence.",
                available: "Available Conditions",
                custom: "Custom Conditions",
                creating: "Creating a Condition"
            },
            
            // Schedules
            schedules: {
                title: "Schedules",
                desc: "Schedules organize system execution into different phases. R-Engine provides several predefined schedules.",
                scheduleTable: {
                    schedule: "Schedule",
                    when: "When",
                    usage: "Usage",
                    startup: "Once at startup",
                    startupUsage: "Initialization, spawn initial entities",
                    preUpdate: "Before UPDATE",
                    preUpdateUsage: "Preparation, frame cleanup",
                    update: "Every frame",
                    updateUsage: "Game logic, physics, AI",
                    postUpdate: "After UPDATE",
                    postUpdateUsage: "Post-processing, finalization",
                    render2d: "2D render phase",
                    render2dUsage: "2D drawing (sprites, UI)",
                    render3d: "3D render phase",
                    render3dUsage: "3D drawing (models, lights)"
                },
                executionOrder: "Execution Order",
                definingOrder: "Defining Order"
            }
        },
        
        // Storage
        storage: {
            title: "Storage System",
            desc: "R-Engine uses <strong>archetype-based</strong> storage to optimize performance. This approach organizes entities by unique component combinations.",
            archetypes: "Archetypes",
            archetypeDesc: "An <strong>archetype</strong> represents a unique combination of component types. All entities with exactly the same components are stored in the same archetype.",
            exampleOrganization: "Example Organization",
            columnarTables: "Columnar Tables",
            columnarDesc: "Each archetype stores its components in columns (Structure of Arrays - SoA), which optimizes memory locality and enables efficient vectorization.",
            transitions: "Archetype Transitions",
            transitionsDesc: "When a component is added or removed from an entity, it changes archetype. R-Engine uses a cache (edges) to optimize these frequent transitions.",
            transitionExample: "Transition Example",
            advantages: "System Advantages",
            advantagesList: {
                cacheLocality: "<strong>Cache Locality</strong>: Data is contiguous in memory",
                fastIteration: "<strong>Fast Iteration</strong>: Queries only iterate over relevant archetypes",
                noFragmentation: "<strong>No Fragmentation</strong>: Swap-and-pop for deletions",
                typeSafety: "<strong>Type Safety</strong>: Compile-time checks",
                scalability: "<strong>Scalability</strong>: Constant performance with many entities"
            },
            internalApi: "Internal API",
            archetypeStructure: "Archetype Structure"
        },
        
        // Examples
        examples: {
            title: "Complete Examples",
            example1: {
                title: "Example 1: Bouncing Balls",
                desc: "Complete demo of a bouncing balls system with physics and rendering."
            },
            example2: {
                title: "Example 2: Event System",
                desc: "Demonstration of the event system for inter-system communication."
            },
            example3: {
                title: "Example 3: States & Menus",
                desc: "Using states to manage different game phases."
            }
        },
        
        // API Reference
        apiReference: {
            title: "Complete API Reference",
            scene: {
                title: "Scene",
                desc: "Main ECS container.",
                method: "Method",
                description: "Description"
            },
            commands: {
                title: "Commands",
                desc: "Interface for deferred modifications."
            },
            entityCommands: {
                title: "EntityCommands",
                desc: "Builder for entity modification."
            },
            query: {
                title: "Query<Wrappers...>",
                desc: "Entity iteration.",
                iterator: "Query::Iterator"
            },
            eventWriter: {
                title: "EventWriter<T>",
                desc: "Event sending."
            },
            eventReader: {
                title: "EventReader<T>",
                desc: "Event reading."
            }
        },
        
        // Footer
        footer: {
            copyright: "¬© 2025 R-Engine Project. Documentation generated for ECS."
        }
    },
    
    fr: {
        // S√©lecteur de langue
        langSelector: {
            label: "Langue",
            en: "English",
            fr: "Fran√ßais"
        },
        
        // Logo
        logo: {
            title: "R-Engine",
            subtitle: "Documentation ECS"
        },
        
        // Navigation
        nav: {
            introduction: "Introduction",
            architecture: "Architecture",
            coreConcepts: "Concepts Cl√©s",
            entities: "Entities",
            components: "Components",
            systems: "Systems",
            resources: "Resources",
            queries: "Queries",
            commands: "Commands",
            advanced: "Fonctionnalit√©s Avanc√©es",
            events: "Events",
            hierarchies: "Hierarchies",
            runConditions: "Run Conditions",
            schedules: "Schedules",
            storage: "Syst√®me de Stockage",
            examples: "Exemples",
            apiReference: "R√©f√©rence API"
        },
        
        // Recherche
        search: {
            placeholder: "Rechercher..."
        },
        
        // Introduction
        introduction: {
            title: "Introduction √† l'ECS R-Engine",
            lead: "R-Engine utilise une architecture <strong>Entity Component System (ECS)</strong> inspir√©e de Bevy, con√ßue pour offrir performance, flexibilit√© et simplicit√© d'utilisation.",
            whatIsECS: "Qu'est-ce qu'un ECS ?",
            whatIsECSDesc: "Un ECS est un patron de conception architectural qui s√©pare les donn√©es (Components) de la logique (Systems), en les reliant via des entit√©s (Entities). Cette approche favorise la composition plut√¥t que l'h√©ritage et permet un code plus modulaire et performant.",
            keyFeatures: "Caract√©ristiques Principales",
            features: {
                archetype: "<strong>Arch√©type-based Storage</strong> : Stockage optimis√© par arch√©type pour des performances maximales",
                typeSafety: "<strong>Type Safety</strong> : Syst√®me de types compile-time pour √©viter les erreurs",
                di: "<strong>Dependency Injection</strong> : R√©solution automatique des d√©pendances syst√®me",
                commandBuffer: "<strong>Command Buffer</strong> : Modifications diff√©r√©es pour √©viter l'invalidation des it√©rateurs",
                events: "<strong>Events System</strong> : Communication asynchrone entre syst√®mes",
                hierarchy: "<strong>Hierarchy Support</strong> : Relations parent-enfant natives"
            }
        },
        
        // Architecture
        architecture: {
            title: "Architecture du Syst√®me",
            executionFlow: "Flux d'Ex√©cution",
            flowSteps: {
                init: "Initialisation",
                initDesc: "Cr√©ation de la Scene et ex√©cution des syst√®mes STARTUP",
                mainLoop: "Boucle Principale",
                update: "Ex√©cution des syst√®mes UPDATE (logique du jeu)",
                applyCommands: "Application du Command Buffer (modifications structurelles)",
                render: "Ex√©cution des syst√®mes RENDER (affichage)",
                updateEvents: "Update des Events (double buffering)"
            }
        },
        
        // Concepts Cl√©s
        coreConcepts: {
            title: "Concepts Cl√©s",
            
            // Entities
            entities: {
                title: "Entities (Entit√©s)",
                desc: "Une entit√© est simplement un identifiant unique (<code>u32</code>) qui regroupe des composants. Elle n'a pas de donn√©es ou de comportement propre.",
                creating: "Cr√©ation d'Entit√©s",
                example: "Exemple"
            },
            
            // Components
            components: {
                title: "Components (Composants)",
                desc: "Les composants sont des structures de donn√©es pures qui d√©finissent les propri√©t√©s d'une entit√©. Ils ne contiennent pas de logique, seulement des donn√©es.",
                bestPractices: "Bonnes Pratiques",
                practices: {
                    simple: "Garder les composants simples et focused",
                    pod: "Utiliser des structs POD (Plain Old Data) autant que possible",
                    multiple: "Pr√©f√©rer plusieurs petits composants √† un gros composant monolithique",
                    markers: "Utiliser des marker components (sans donn√©es) pour taguer des entit√©s"
                },
                examples: "Exemples de Composants"
            },
            
            // Systems
            systems: {
                title: "Systems (Syst√®mes)",
                desc: "Les syst√®mes sont des fonctions qui impl√©mentent la logique de votre application. Ils op√®rent sur des entit√©s via des queries et peuvent acc√©der aux ressources globales.",
                anatomy: "Anatomie d'un Syst√®me",
                basicStructure: "Structure de Base",
                parameters: "Param√®tres de Syst√®me",
                paramTable: {
                    type: "Type",
                    description: "Description",
                    usage: "Utilisation",
                    query: "It√©rer sur des entit√©s avec certains composants",
                    queryUsage: "Logique sur plusieurs entit√©s",
                    res: "Acc√®s lecture seule √† une ressource",
                    resUsage: "Lire configuration, temps, etc.",
                    resMut: "Acc√®s mutable √† une ressource",
                    resMutUsage: "Modifier √©tat global",
                    commands: "Buffer de commandes diff√©r√©es",
                    commandsUsage: "Spawn, despawn, add/remove components",
                    eventWriter: "Envoyer des √©v√©nements",
                    eventWriterUsage: "Communication asynchrone",
                    eventReader: "Lire des √©v√©nements",
                    eventReaderUsage: "R√©agir aux √©v√©nements"
                },
                completeExample: "Exemple Complet",
                registration: "Enregistrement des Syst√®mes"
            },
            
            // Resources
            resources: {
                title: "Resources (Ressources)",
                desc: "Les ressources sont des donn√©es globales, uniques, accessibles par tous les syst√®mes. Elles sont parfaites pour stocker la configuration, l'√©tat global, ou des services.",
                defAndUsage: "D√©finition et Utilisation"
            },
            
            // Queries
            queries: {
                title: "Queries (Requ√™tes)",
                desc: "Les queries permettent d'it√©rer sur des entit√©s qui correspondent √† certains crit√®res. Elles supportent plusieurs types de filtres et d'acc√®s.",
                accessTypes: "Types d'Acc√®s",
                accessTable: {
                    wrapper: "Wrapper",
                    description: "Description",
                    example: "Exemple",
                    mut: "Acc√®s mutable au composant T",
                    ref: "Acc√®s lecture seule au composant T",
                    with: "Filtre: requiert le composant T (sans acc√®s)",
                    without: "Filtre: exclut les entit√©s avec T",
                    optional: "Acc√®s optionnel (nullptr si absent)"
                },
                examples: "Exemples de Queries",
                warning: "‚ö†Ô∏è Important",
                warningText: "Ne modifiez jamais la structure de l'ECS (spawn, despawn, add/remove components) pendant l'it√©ration d'une query. Utilisez plut√¥t <code>Commands</code> pour diff√©rer ces op√©rations."
            },
            
            // Commands
            commands: {
                title: "Commands (Commandes)",
                desc: "Le syst√®me de commandes permet de diff√©rer les modifications structurelles de l'ECS (cr√©ation/destruction d'entit√©s, ajout/suppression de composants) pour √©viter l'invalidation des it√©rateurs pendant l'ex√©cution des syst√®mes.",
                api: "API des Commandes",
                operations: "Op√©rations Disponibles",
                hierarchies: "Hi√©rarchies Parent-Enfant",
                hierarchyRelations: "Relations Hi√©rarchiques",
                applyMoment: "üí° Moment d'Application",
                applyMomentText: "Toutes les commandes sont appliqu√©es automatiquement √† la fin du schedule courant, juste avant l'application suivante des syst√®mes. Vous n'avez pas besoin d'appeler manuellement <code>apply()</code>."
            }
        },
        
        // Fonctionnalit√©s Avanc√©es
        advanced: {
            title: "Fonctionnalit√©s Avanc√©es",
            
            // Events
            events: {
                title: "Events (√âv√©nements)",
                desc: "Le syst√®me d'√©v√©nements permet une communication asynchrone entre syst√®mes. Les √©v√©nements utilisent un double buffering: les √©v√©nements envoy√©s √† la frame N sont lisibles √† la frame N+1.",
                defAndUsage: "D√©finition et Utilisation",
                warning: "‚ö†Ô∏è Dur√©e de Vie",
                warningText: "Les √©v√©nements ne persistent qu'une seule frame. Ils sont automatiquement nettoy√©s au d√©but de chaque nouveau cycle de frame."
            },
            
            // Hierarchies
            hierarchies: {
                title: "Hierarchies (Hi√©rarchies)",
                desc: "R-Engine supporte nativement les relations parent-enfant via les composants <code>Parent</code> et <code>Children</code>.",
                components: "Composants de Hi√©rarchie",
                autoComponents: "Composants automatiques",
                creation: "Cr√©ation d'une Hi√©rarchie",
                traversal: "Parcourir une Hi√©rarchie"
            },
            
            // Run Conditions
            runConditions: {
                title: "Run Conditions (Conditions d'Ex√©cution)",
                desc: "Les run conditions permettent d'ex√©cuter des syst√®mes conditionnellement, en fonction de l'√©tat de l'application ou de la pr√©sence d'√©v√©nements.",
                available: "Conditions Disponibles",
                custom: "Conditions Personnalis√©es",
                creating: "Cr√©er une Condition"
            },
            
            // Schedules
            schedules: {
                title: "Schedules (Planificateurs)",
                desc: "Les schedules organisent l'ex√©cution des syst√®mes en diff√©rentes phases. R-Engine fournit plusieurs schedules pr√©d√©finis.",
                scheduleTable: {
                    schedule: "Schedule",
                    when: "Quand",
                    usage: "Usage",
                    startup: "Une fois au d√©marrage",
                    startupUsage: "Initialisation, spawn des entit√©s initiales",
                    preUpdate: "Avant UPDATE",
                    preUpdateUsage: "Pr√©paration, nettoyage de frame",
                    update: "Chaque frame",
                    updateUsage: "Logique du jeu, physique, AI",
                    postUpdate: "Apr√®s UPDATE",
                    postUpdateUsage: "Post-traitement, finalisation",
                    render2d: "Phase de rendu 2D",
                    render2dUsage: "Dessin 2D (sprites, UI)",
                    render3d: "Phase de rendu 3D",
                    render3dUsage: "Dessin 3D (mod√®les, lumi√®res)"
                },
                executionOrder: "Ordre d'Ex√©cution",
                definingOrder: "D√©finir l'Ordre"
            }
        },
        
        // Stockage
        storage: {
            title: "Syst√®me de Stockage",
            desc: "R-Engine utilise un stockage bas√© sur les <strong>arch√©types</strong> pour optimiser les performances. Cette approche organise les entit√©s par combinaison unique de composants.",
            archetypes: "Arch√©types",
            archetypeDesc: "Un <strong>archetype</strong> repr√©sente une combinaison unique de types de composants. Toutes les entit√©s avec exactement les m√™mes composants sont stock√©es dans le m√™me archetype.",
            exampleOrganization: "Exemple d'Organisation",
            columnarTables: "Tables Columnar",
            columnarDesc: "Chaque archetype stocke ses composants dans des colonnes (Structure of Arrays - SoA), ce qui optimise la localit√© m√©moire et permet une vectorisation efficace.",
            transitions: "Transitions d'Arch√©types",
            transitionsDesc: "Lorsqu'un composant est ajout√© ou retir√© d'une entit√©, celle-ci change d'archetype. R-Engine utilise un cache (edges) pour optimiser ces transitions fr√©quentes.",
            transitionExample: "Exemple de Transition",
            advantages: "Avantages du Syst√®me",
            advantagesList: {
                cacheLocality: "<strong>Cache Locality</strong> : Les donn√©es sont contigu√´s en m√©moire",
                fastIteration: "<strong>It√©ration Rapide</strong> : Les queries n'it√®rent que sur les arch√©types pertinents",
                noFragmentation: "<strong>Pas de Fragmentation</strong> : Swap-and-pop pour les suppressions",
                typeSafety: "<strong>Type Safety</strong> : V√©rifications √† la compilation",
                scalability: "<strong>Scalabilit√©</strong> : Performance constante avec beaucoup d'entit√©s"
            },
            internalApi: "API Interne",
            archetypeStructure: "Structure Archetype"
        },
        
        // Exemples
        examples: {
            title: "Exemples Complets",
            example1: {
                title: "Exemple 1: Bouncing Balls",
                desc: "D√©mo compl√®te d'un syst√®me de balles rebondissantes avec physique et rendu."
            },
            example2: {
                title: "Exemple 2: Event System",
                desc: "D√©monstration du syst√®me d'√©v√©nements pour la communication entre syst√®mes."
            },
            example3: {
                title: "Exemple 3: States & Menus",
                desc: "Utilisation des √©tats pour g√©rer diff√©rentes phases du jeu."
            }
        },
        
        // R√©f√©rence API
        apiReference: {
            title: "R√©f√©rence API Compl√®te",
            scene: {
                title: "Scene",
                desc: "Container principal de l'ECS.",
                method: "M√©thode",
                description: "Description"
            },
            commands: {
                title: "Commands",
                desc: "Interface pour modifications diff√©r√©es."
            },
            entityCommands: {
                title: "EntityCommands",
                desc: "Builder pour modification d'entit√©s."
            },
            query: {
                title: "Query<Wrappers...>",
                desc: "It√©ration sur les entit√©s.",
                iterator: "Query::Iterator"
            },
            eventWriter: {
                title: "EventWriter<T>",
                desc: "Envoi d'√©v√©nements."
            },
            eventReader: {
                title: "EventReader<T>",
                desc: "Lecture d'√©v√©nements."
            }
        },
        
        // Footer
        footer: {
            copyright: "¬© 2025 R-Engine Project. Documentation g√©n√©r√©e pour l'ECS."
        }
    }
};

// Export for use in other scripts
if (typeof module !== 'undefined' && module.exports) {
    module.exports = translations;
}